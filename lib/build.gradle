import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.2.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    id 'maven-publish'
//    id 'signing'
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': rootProject.name,
                   'Implementation-Version': project.version)
    }
    archiveBaseName.set(rootProject.name)
}

tasks.withType(KotlinCompile).all {
  kotlinOptions {
    jvmTarget = "17"
  }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

repositories {
    mavenLocal()
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'

    // Use the JUnit 5 integration.
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    // Use Kotest testing
    testImplementation 'io.kotest:kotest-runner-junit5:5.6.2'
    testImplementation 'io.kotest:kotest-assertions-core:5.6.2'
    testImplementation 'io.kotest:kotest-property:5.6.2'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'

    implementation 'io.arrow-kt:arrow-core:1.2.0'

    implementation "org.jetbrains.kotlin:kotlin-reflect:1.9.10"

    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.angstrom'
            artifactId = 'angstromio-util'
            version = '0.0.1-SNAPSHOT'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'angstromio-util'
                description = 'A collection of Kotlin utilities.'
                url = 'https://angstrom.io/github/angstromio/angstromio-util/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'cacoco'
                        name = 'Christopher Coco'
                        email = 'cacoco@angstrom.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/angstromio/angstromio-util.git'
                    developerConnection = 'scm:git:ssh://github.com/angstromio/angstromio-util.git'
                    url = 'https://github.com/angstromio/angstromio-util'
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

//signing {
//    sign publishing.publications.mavenJava
//}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
